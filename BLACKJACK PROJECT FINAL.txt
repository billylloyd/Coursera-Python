# Mini-project #6 - Blackjack

import simplegui
import random

# load card sprite - 936x384 - source: jfitz.com
CARD_SIZE = (72, 96)
CARD_CENTER = (36, 48)
card_images = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/cards_jfitz.png")

CARD_BACK_SIZE = (72, 96)
CARD_BACK_CENTER = (36, 48)
card_back = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/card_jfitz_back.png")    

# initialize some useful global variables
in_play = False
outcome = "Hit or stand?"
player_score = 0
dealer_score = 0

# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}


# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos):
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
        
# define hand class
class Hand:
    def __init__(self):
        self.cards = []

    def __str__(self):
        ans = ""
        for i in self.cards:
            ans += " " + str(i)
        return "Hand contains " + ans
    
    def add_card(self, card):
        self.cards.append(card)

    def get_value(self):
        # count aces as 1, if the hand has an ace, then add 10 to hand value if it doesn't bust       
        value = 0
        has_ace = False
        for i in self.cards:
            rank = i.get_rank()
            
            if rank == 'A':
                has_ace = True
                
            if has_ace == True:
                value += VALUES[rank]
            else:
                if rank == 'A':
                    value += VALUES[rank] + 10
                else:
                    value += VALUES[rank]

        return value  

    def draw(self, canvas, pos):
        for c in self.cards:
            c.draw(canvas, pos)
            pos[0] += 50
 
        
# define deck class 
class Deck:
    def __init__(self):
        self.cards = []
        
        for suit in SUITS:
            for rank in RANKS:
                self.cards.append(Card(suit, rank))

    def shuffle(self):
        random.shuffle(self.cards)

    def deal_card(self):
        return self.cards.pop(-1)
    
    def __str__(self):
        ans = ""
        for i in self.cards:
            ans += " " + str(i)
        return "Deck contains " + ans



#define event handlers for buttons
def deal():
    global outcome, in_play, my_deck, my_hand, dealer_hand, player_score, dealer_score
    
    outcome = "Hit or stand?"
    
    if in_play == True:
        outcome = "Dealer wins! New deal?"
        dealer_score += 1
       
    in_play = True
    
    my_deck = Deck()
    my_deck.shuffle()
    
    my_hand = Hand()
    dealer_hand = Hand()
    
    my_hand.add_card(my_deck.deal_card())
    dealer_hand.add_card(my_deck.deal_card())
    
    my_hand.add_card(my_deck.deal_card())
    dealer_hand.add_card(my_deck.deal_card())
    
    print "Player " + str(my_hand)
    print "Dealer " + str(dealer_hand)
    
    in_play = True

def hit():
    global outcome, dealer_score, player_score, in_play, my_deck
    
    if in_play == True:
        if my_hand.get_value() <= 21:
            my_hand.add_card(my_deck.deal_card())
            
            print str(my_hand)
            print "Player hand: " + str(my_hand.get_value())
            
            if my_hand.get_value() > 21:                
                outcome = "You busted! New deal?"
                print "You have busted!!"
                dealer_score += 1  
                in_play = False
 
    # if the hand is in play, hit the player
   
    # if busted, assign a message to outcome, update in_play and score
       
def stand():
    global outcome, in_play, player_score, dealer_score
    
    if in_play == True:
    
        if my_hand.get_value() > 21:
            print "You have busted!"
        else:
            while dealer_hand.get_value() < 17:
                dealer_hand.add_card(my_deck.deal_card())
                print "Dealer hand: " + str(dealer_hand.get_value())
            
        if dealer_hand.get_value() > 21:
            print "Dealer has busted!"
            outcome = "Dealer busted! New deal?"
            player_score += 1
        else:
            if my_hand.get_value() <= dealer_hand.get_value():
                print "Dealer Wins!"
                outcome = "Dealer wins! New deal?"
                dealer_score += 1
            else:
                print "Player Wins!"
                outcome = "Player Wins! New deal?"
                player_score += 1
            
    in_play = False
   
    # if hand is in play, repeatedly hit dealer until his hand has value 17 or more

    # assign a message to outcome, update in_play and score

# draw handler    
def draw(canvas):
    # test to make sure that card.draw works, replace with your code below
    
    my_hand.draw(canvas, [60, 350])
    dealer_hand.draw(canvas, [60, 150])
    
    canvas.draw_text("BLACKJACK", [180,50], 50, 'Black')
    canvas.draw_text(outcome, [50, 100], 40, 'Red')
    canvas.draw_text("Score: " + str(player_score), [425, 400], 40, 'blue')
    canvas.draw_text("Score: " + str(dealer_score), [425, 200], 40, 'black')
    
    if in_play == True:
        canvas.draw_image(card_back, CARD_BACK_CENTER, CARD_BACK_SIZE, [97, 198], CARD_BACK_SIZE)

# initialization frame
frame = simplegui.create_frame("Blackjack", 600, 600)
frame.set_canvas_background("Green")

#create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.set_draw_handler(draw)


# get things rolling
deal()
frame.start()


# remember to review the gradic rubric